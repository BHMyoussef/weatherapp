{"version":3,"sources":["Components/weatherCard.jsx","Components/cards.jsx","Components/header.jsx","Components/notFoundPage.jsx","Components/loadingPage.jsx","App.js","reportWebVitals.js","index.js"],"names":["allweekDay","allMonth","WeatherCard","weatherInfo","date","index","addClass","back","console","log","to","className","day","month","onClick","main","temp_max","temp_min","humidity","pressure","wind","deg","speed","src","weather","icon","alt","temp","description","Cards","props","data","nextDays","match","params","id","history","goBack","map","card","i","Header","city","NotFoundPage","Component","loadingPage","App","state","fetch","then","response","json","setState","endPointApi","list","push","moment","add","this","getNextDays","length","path","exact","component","render","from","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.6908c6ab.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst allweekDay=['dimanch','lundi','mardi','mercredi','jeudi','vendredi','samedi'];\r\nconst allMonth=['jan','fev','mars','apr','may','juin','juillet','aout','sept','oct','nov','dec']\r\n\r\nconst WeatherCard = ({weatherInfo, date, index,addClass, back}) =>{\r\n    console.log(index);\r\n    return(\r\n        <Link to={`/weatherapp/day${index}`}>\r\n            <div className={addClass?\"card fullCard\":\"card\"}>\r\n                <div className=\"head\">\r\n                    <h3>{allweekDay[date.day()]}</h3>\r\n                    <p className=\"date\">{`${allMonth[date.month()]} ${date.date()}`}</p>\r\n                </div>\r\n                <div className=\"infos\">\r\n                    {\r\n                        addClass && \r\n                        <div className=\"infos1\">\r\n                            <button onClick={()=>back()}></button>\r\n                            <div>\r\n                                <i className=\"icon\"></i>\r\n                                <p>Max temprature: <span>{weatherInfo.main.temp_max}</span>°K</p>\r\n                            </div>\r\n                            <div>\r\n                                <i className=\"icon\"></i>\r\n                                <p>Min temprature: <span>{weatherInfo.main.temp_min}</span>°k</p>\r\n                            </div>\r\n                            <div>\r\n                                <i className=\"icon\"></i>\r\n                                <p>Humidity: <span>{weatherInfo.main.humidity}</span></p>\r\n                            </div>\r\n                            <div>\r\n                                <i className=\"icon\"></i>\r\n                                <p>Pressure: <span>{weatherInfo.main.pressure}</span>Bar</p>\r\n                            </div>\r\n                            <div>\r\n                                <i className=\"icon\"></i>\r\n                                <p> \r\n                                    deg: <span>{weatherInfo.wind.deg}</span><br />\r\n                                    Speed: <span>{weatherInfo.wind.speed}</span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                    <div className=\"infos2\">\r\n                        <div className=\"icon\"><img src={`https://openweathermap.org/img/wn/${weatherInfo.weather[0].icon}@2x.png`} alt=\"\" /></div>\r\n                        <p className=\"degree\">{weatherInfo.main.temp}</p>\r\n                        <p>{weatherInfo.weather[0].description}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Link>\r\n    );\r\n}\r\nexport default WeatherCard;","import React from \"react\";\r\nimport WeatherCard from \"./weatherCard\";\r\nimport { Redirect } from \"react-router\";\r\n\r\nconst Cards =(props) =>{\r\n        const {data, nextDays,match} = props;\r\n        if (match.params.id) {\r\n            if(match.params.id<5){\r\n                return <WeatherCard index={match.params.id}\r\n                         weatherInfo={data[match.params.id]}\r\n                         date = {nextDays[match.params.id]} \r\n                         addClass=\"fullCard\"\r\n                         back={props.history.goBack}/>\r\n            }\r\n            else{\r\n                return <Redirect to=\"weatherapp/not-found\" />\r\n            }\r\n        }else{\r\n            return(\r\n                <div className=\"cardsHolder\">\r\n                    {\r\n                        data.map((card,i) => <WeatherCard key={i} \r\n                                                            index={i}\r\n                                                            weatherInfo={data[i]}\r\n                                                            date = {nextDays[i]}\r\n                                            />\r\n                                )\r\n                    }\r\n                </div>\r\n\r\n            );\r\n        }\r\n}\r\n\r\nexport default Cards;","import React from 'react'\r\n\r\nconst Header =(props)=> {\r\n        return (\r\n            <div className='header'>\r\n                <h1>5 days ForeCast</h1>\r\n                <h3>{props.city}</h3>\r\n            </div>\r\n        )\r\n}\r\nexport default  Header;","import React, { Component } from 'react'\r\n\r\nexport default class NotFoundPage extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>page not found</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nclass loadingPage extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>loading</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default loadingPage;","import React,{ Component } from \"react\";\nimport moment from \"moment\";\nimport Cards from './Components/cards';\nimport Header from './Components/header';\nimport NotFoundPage from './Components/notFoundPage';\nimport LoadingPage from './Components/loadingPage'\nimport './main.css';\nimport { Route, Switch, Redirect } from 'react-router-dom'\n\nfunction getWeatherApi(city){\n    return `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=3518ad82ca06ca13a7b7b9a218d61c51`;\n}\nclass App extends Component{\n    state ={\n        data:[],\n        city:''\n    }\n    componentDidMount(){\n        let data = [];\n        let i = 0;\n        fetch('https://extreme-ip-lookup.com/json')\n        .then(response => response.json())\n        .then(response => {\n            this.setState({city:response.city});})\n        .then(()=>{\n            const endPointApi = getWeatherApi(this.state.city)\n            fetch(endPointApi).then(response => response.json()).then(response => {\n                for(i=0;i<5;i++){\n                    let day = response.list[i];\n                    data.push(day);\n                }\n                this.setState({data});\n            });\n        })\n    }\n    getNextDays(){\n        const nextDays = [\n            moment(),\n            moment().add(1,'d'),\n            moment().add(2,'d'),\n            moment().add(3,'d'),\n            moment().add(4,'d')\n        ]\n        return nextDays;\n    }\n    render(){\n        const nextDays = this.getNextDays();\n        if(this.state.data.length===0){\n            return(\n                <div>\n                    <Header/>\n                    <LoadingPage/>\n                </div>\n            );\n        }\n        return(\n            <div className=\"container\">\n                <Header city={this.state.city}/>\n                <Switch>\n                    <Route path=\"/weatherapp\" exact component={(props)=> <Cards {...props} data = {this.state.data}\n                            nextDays = {nextDays} /> }/>\n                    <Route path=\"/weatherapp/day:id\" render={ (props)=> {return this.state.data.length !== 0 &&\n                                    <Cards {...props} data = {this.state.data}\n                                    nextDays = {nextDays} /> }}/>\n                    <Route path=\"/weatherapp/not-found\" component={ NotFoundPage } />\n                    <Redirect from=\"/\" exact to=\"/weatherapp\"/>\n                    <Redirect to=\"/weatherapp/not-found\" />                  \n                </Switch>\n            </div>\n        );\n    }\n}\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}