{"version":3,"sources":["Components/weatherCard.jsx","Components/cards.jsx","Components/header.jsx","Components/notFoundPage.jsx","Components/loadingPage.jsx","App.js","reportWebVitals.js","index.js"],"names":["allweekDay","allMonth","WeatherCard","weatherInfo","date","index","addClass","console","log","to","className","day","month","main","temp_max","temp_min","humidity","pressure","wind","deg","speed","src","weather","icon","alt","temp","description","Cards","props","data","nextDays","match","params","id","map","card","i","Header","Component","NotFoundPage","loadingPage","App","state","fetch","then","response","json","list","push","setState","moment","add","this","getNextDays","length","path","render","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.30b67adf.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst allweekDay=['dimanch','lundi','mardi','mercredi','jeudi','vendredi','samedi'];\r\nconst allMonth=['jan','fev','mars','apr','may','juin','juillet','aout','sept','oct','nov','dec']\r\n\r\nconst WeatherCard = ({weatherInfo, date, index,addClass}) =>{\r\n    console.log(addClass);\r\n    return(\r\n        <Link to={`day${index}`}>\r\n            <div className={addClass?\"card fullCard\":\"card\"}>\r\n                <div className=\"head\">\r\n                    <h3>{allweekDay[date.day()]}</h3>\r\n                    <p className=\"date\">{`${allMonth[date.month()]} ${date.date()}`}</p>\r\n                </div>\r\n                <div className=\"infos\">\r\n                    {\r\n                        addClass && \r\n                        <div className=\"infos1\">\r\n                            <div>\r\n                                <i className=\"icon\"></i>\r\n                                <p>Max temprature: <span>{weatherInfo.main.temp_max}</span>°K</p>\r\n                            </div>\r\n                            <div>\r\n                                <i className=\"icon\"></i>\r\n                                <p>Min temprature: <span>{weatherInfo.main.temp_min}</span>°k</p>\r\n                            </div>\r\n                            <div>\r\n                                <i className=\"icon\"></i>\r\n                                <p>Humidity: <span>{weatherInfo.main.humidity}</span></p>\r\n                            </div>\r\n                            <div>\r\n                                <i className=\"icon\"></i>\r\n                                <p>Pressure: <span>{weatherInfo.main.pressure}</span>Bar</p>\r\n                            </div>\r\n                            <div>\r\n                                <i className=\"icon\"></i>\r\n                                <p> \r\n                                    deg: <span>{weatherInfo.wind.deg}</span><br />\r\n                                    Speed: <span>{weatherInfo.wind.speed}</span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                    <div className=\"infos2\">\r\n                        <div className=\"icon\"><img src={`https://openweathermap.org/img/wn/${weatherInfo.weather[0].icon}@2x.png`} alt=\"\" /></div>\r\n                        <p className=\"degree\">{weatherInfo.main.temp}</p>\r\n                        <p>{weatherInfo.weather[0].description}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Link>\r\n    );\r\n}\r\nexport default WeatherCard;","import React from \"react\";\r\nimport WeatherCard from \"./weatherCard\";\r\nimport { Redirect } from \"react-router\";\r\n\r\nconst Cards =(props) =>{\r\n        const {data, nextDays,match} = props;\r\n        if (match.params.id) {\r\n            if(match.params.id<5){\r\n                return <WeatherCard index={match.params.id}\r\n                         weatherInfo={data[match.params.id]}\r\n                         date = {nextDays[match.params.id]} \r\n                         addClass=\"fullCard\"/>\r\n            }\r\n            else{\r\n                return <Redirect to=\"not-found\" />\r\n            }\r\n        }else{\r\n            return(\r\n                <div className=\"cardsHolder\">\r\n                    {\r\n                        data.map((card,i) => <WeatherCard key={i} \r\n                                                            index={i}\r\n                                                            weatherInfo={data[i]}\r\n                                                            date = {nextDays[i]}\r\n                                            />\r\n                                )\r\n                    }\r\n                </div>\r\n\r\n            );\r\n        }\r\n}\r\n\r\nexport default Cards;","import React, { Component } from 'react'\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n            <div className='header'>\r\n                <h1>5 days ForeCast</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default  Header;","import React, { Component } from 'react'\r\n\r\nexport default class NotFoundPage extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>page not found</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nclass loadingPage extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>loading</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default loadingPage;","import React,{ Component } from \"react\";\nimport moment from \"moment\";\nimport Cards from './Components/cards';\nimport Header from './Components/header';\nimport NotFoundPage from './Components/notFoundPage';\nimport LoadingPage from './Components/loadingPage'\nimport './main.css';\nimport { Route, Switch, Redirect } from 'react-router-dom'\n\nconst endPointApi = 'https://api.openweathermap.org/data/2.5/forecast?q=marrakech&appid=3518ad82ca06ca13a7b7b9a218d61c51'\nclass App extends Component{\n    state ={\n        data:[],\n    }\n    componentDidMount(){\n        let data = [];\n        let i = 0;\n        fetch(endPointApi).then(response => response.json()).then(response => {\n            for(i=0;i<5;i++){\n                let day = response.list[i];\n                data.push(day);\n            }\n            this.setState({data});\n        });\n    }\n    getNextDays(){\n        const nextDays = [\n            moment(),\n            moment().add(1,'d'),\n            moment().add(2,'d'),\n            moment().add(3,'d'),\n            moment().add(4,'d')\n        ]\n        return nextDays;\n    }\n    render(){\n        const nextDays = this.getNextDays();\n        if(this.state.data.length===0){\n            return(\n                <div>\n                    <Header/>\n                    <LoadingPage/>\n                </div>\n            );\n        }\n        return(\n            <div className=\"container\">\n                <Header/>\n                <Switch>\n                    <Route path=\"/day:id\" render={ (props)=> {return this.state.data.length !== 0 &&\n                                    <Cards {...props} data = {this.state.data}\n                                    nextDays = {nextDays} /> }}/>\n                    <Route path=\"/not-found\" component={ NotFoundPage } />\n                    <Route path=\"/\" exact component={(props)=> <Cards {...props} data = {this.state.data}\n                            nextDays = {nextDays} /> }/>\n                    <Redirect to=\"/not-found\" />                  \n                </Switch>\n            </div>\n        );\n    }\n}\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}